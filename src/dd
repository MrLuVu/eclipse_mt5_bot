Ho allenato un modelllo ai cos' def aggiorna_profitto(): """# Percorso del file di input (xlsx) e output (csv) input_file = "report.xlsx" output_file = "output.csv" # Leggi il file Excel df = pd.read_excel(input_file) # Salva come CSV (con separatore virgola, senza indice) df.to_csv(output_file, index=False, encoding="utf-8") print(f"Conversione completata: {output_file}")""" # Leggi i due file df1 = pd.read_csv("trades_log.csv") # quello che vuoi aggiornare df2 = pd.read_csv("output.csv") # quello con i valori corretti di profit # Assicuriamoci che la colonna ticket sia dello stesso tipo df1["ticket"] = df1["ticket"].astype(int).astype(str) df2["ticket"] = df2["ticket"].astype(int).astype(str) # Creiamo un dizionario ticket->profit dal secondo file profit_dict = dict(zip(df2["ticket"], df2["profit"])) # Aggiorniamo la colonna profit nel primo file usando il mapping df1["profit"] = df1["ticket"].map(profit_dict).fillna(df1["profit"]) # Salviamo il risultato df1.to_csv("file1_aggiornato.csv", index=False, encoding="utf-8") print("Aggiornamento completato!") # ============================ # Addestramento modello # ============================ def train_ai_model(): """ Addestra o aggiorna il modello AI usando trades_log.csv """ if not os.path.exists(TRADES_FILE): print(f"[ERRORE] File {TRADES_FILE} non trovato.") return df = pd.read_csv(TRADES_FILE) if "profit" not in df.columns: print("[ERRORE] Colonna 'profit' mancante in CSV.") return # Target: trade positivo o negativo df["target"] = (df["profit"] > 0).astype(int) # Features feature_cols = [ "exec_price","stop_loss","take_profit","risk","rr_effective", "poi_tipo","poi_direzione","poi_timeframe","poi_bottom","poi_top", "trend","range_high","range_low","buy_liquidity","sell_liquidity" ] X = df[feature_cols].fillna(0) X = pd.get_dummies(X) y = df["target"] # Train/test split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # RandomForest model = RandomForestClassifier(n_estimators=200, random_state=42) model.fit(X_train, y_train) acc = model.score(X_test, y_test) print(f"[INFO] Modello addestrato. Accuracy su test set: {acc:.2f}") # Salva modello + feature_cols joblib.dump({"model": model, "features": feature_cols}, MODEL_FILE) print(f"[INFO] Modello salvato in {MODEL_FILE}") # ============================ # Predizione su nuovo trade # ============================ def predict_live(new_trade_dict): """ Restituisce probabilità che il nuovo trade sia positivo """ if not os.path.exists(MODEL_FILE): print("[INFO] Nessun modello salvato, avvio addestramento...") train_ai_model() data = joblib.load(MODEL_FILE) model = data["model"] feature_cols = data["features"] df_new = pd.DataFrame([new_trade_dict]) df_new = pd.get_dummies(df_new) df_new = df_new.reindex(columns=feature_cols, fill_value=0) prob = model.predict_proba(df_new)[0][1] return prob # ============================ # Main # ============================ if __name__ == "__main__": # Aggiorna profit da MT5 #update_trades_with_mt5() #aggiorna_profitto() # Addestra modello train_ai_model() #pass sulla base di questo file, così formattato: timestamp,ticket,symbol,signal,exec_price,stop_loss,take_profit,risk,rr_effective,poi_tipo,poi_direzione,poi_timeframe,poi_bottom,poi_top,trend,range_high,range_low,buy_liquidity,sell_liquidity,profit 2025-08-18 22:56:18.866613,1188021274.0,BTCUSD,BUY,116445.75,116298.8215,116448.5,146.92849999999453,0.0187165866390802,Orderblock,Bullish,M1,116318.5,116327.38,Bullish,116470.5,116260.25,"[116740.0, 116699.75, 116657.5, 116583.75, 116513.75, 116468.25, 116483.5, 116482.25, 116432.5, 116440.75, 116393.75, 116527.0, 116481.25, 116605.75, 116545.5, 116588.75, 116646.0, 116711.25, 116679.0, 116442.25, 116384.5, 116422.5, 116394.0, 116392.25, 116444.0, 116344.0, 116456.5, 116409.75, 116351.0, 116318.25, 116448.5, 116427.25, 116409.75, 116468.75, 116523.25, 116451.0, 116470.5, 116598.0, 116584.25, 116266.0, 116175.0, 116317.5, 116337.38, 116825.75, 116690.75, 116669.75, 116643.25, 116656.5, 116616.5, 116583.5, 116546.5, 116514.75, 116496.0, 116462.5, 116483.5, 116441.25, 116425.25, 116377.5, 116390.75, 116354.25, 116307.0, 116527.0, 116597.75, 116569.75, 116629.75, 116340.25, 116409.75, 116328.25, 116257.25, 116170.0, 116212.5, 116727.5, 116643.25, 116616.5, 116607.5, 116583.5, 116514.75, 116505.75, 116462.5, 116460.5, 116425.25, 116354.25, 116307.0, 116444.75, 116427.0, 116581.75, 116577.25, 116532.0, 116475.5, 116456.5, 116520.5, 116551.75, 116605.25, 116604.25, 116596.75, 116559.25, 116539.25, 116603.5, 116571.0, 116467.0, 116398.5, 116342.75, 116339.5, 116350.5, 116336.5, 116388.25, 116384.0, 116339.5, 116316.25, 116301.5, 116421.5, 116394.5, 116368.88, 116364.25, 116330.75, 116514.75, 116499.25, 116480.25, 116467.0, 116429.5, 116533.25, 116526.75, 116483.25, 116466.75, 116361.75, 116257.25, 116316.63, 116598.0]","[116651.5, 116583.25, 116535.5, 116494.5, 116508.5, 116413.13, 116421.5, 116429.0, 116417.25, 116344.0, 116278.0, 116408.0, 116401.13, 116486.5, 116397.5, 116500.0, 116540.25, 116525.75, 116551.75, 116520.75, 116327.25, 116246.0, 116278.5, 116302.5, 116283.5, 116253.75, 116309.75, 116259.25, 116274.5, 116281.5, 116344.75, 116260.25, 116432.75, 116467.25, 116371.75, 116419.0, 116396.0, 116529.25, 116177.5, 116023.38, 116122.25, 116260.0, 116288.38, 116683.5, 116651.5, 116610.75, 116631.25, 116588.5, 116535.5, 116494.5, 116553.25, 116508.5, 116482.25, 116413.13, 116463.0, 116445.0, 116429.5, 116344.0, 116329.5, 116278.0, 116296.0, 116401.13, 116523.0, 116566.0, 116370.0, 116246.0, 116316.5, 116259.25, 116382.5, 116177.5, 116189.75, 116117.5, 116553.25, 116614.25, 116406.0, 116296.0, 116443.25, 116445.25, 116465.0, 116488.75, 116564.5, 116501.0, 116508.5, 116513.0, 116566.0, 116620.25, 116536.75, 116625.25, 116304.5, 116326.0, 116365.0, 116367.5, 116372.5, 116362.0, 116379.75, 116372.75, 116275.75, 116294.0, 116301.75, 116361.5, 116398.0, 116381.88, 116404.75, 116335.75, 116352.25, 116446.25, 116498.75, 116467.5, 116481.0, 116505.0, 116525.75, 116558.25, 116120.0, 116124.75, 116155.0, 116179.5, 116242.0, 116299.5, 116349.75, 116423.75, 116023.38]",0.0 2025-08-18 22:56:25.197138,1188021302.0,BTCUSD,BUY,116451.25,116298.8215,116467.0,152.42849999999453,0.1033271337053147,Orderblock,Bullish,M1,116318.5,116327.38,Bullish,116470.5,116260.25,"[116740.0, 116699.75, 116657.5, 116583.75, 116513.75, 116468.25, 116483.5, 116482.25, 116432.5, 116440.75, 116393.75, 116527.0, 116481.25, 116605.75, 116545.5, 116588.75, 116646.0, 116711.25, 116679.0, 116442.25, 116384.5, 116422.5, 116394.0, 116392.25, 116444.0, 116344.0, 116456.5, 116409.75, 116351.0, 116318.25, 116448.5, 116427.25, 116409.75, 116468.75, 116523.25, 116451.0, 116470.5, 116598.0, 116584.25, 116266.0, 116175.0, 116317.5, 116337.38, 116825.75, 116690.75, 116669.75, 116643.25, 116656.5, 116616.5, 116583.5, 116546.5, 116514.75, 116496.0, 116462.5, 116483.5, 116441.25, 116425.25, 116377.5, 116390.75, 116354.25, 116307.0, 116527.0, 116597.75, 116569.75, 116629.75, 116340.25, 116409.75, 116328.25, 116257.25, 116170.0, 116212.5, 116727.5, 116643.25, 116616.5, 116607.5, 116583.5, 116514.75, 116505.75, 116462.5, 116460.5, 116425.25, 116354.25, 116307.0, 116444.75, 116427.0, 116581.75, 116577.25, 116532.0, 116475.5, 116456.5, 116520.5, 116551.75, 116605.25, 116604.25, 116596.75, 116559.25, 116539.25, 116603.5, 116571.0, 116467.0, 116398.5, 116342.75, 116339.5, 116350.5, 116336.5, 116388.25, 116384.0, 116339.5, 116316.25, 116301.5, 116421.5, 116394.5, 116368.88, 116364.25, 116330.75, 116514.75, 116499.25, 116480.25, 116467.0, 116429.5, 116533.25, 116526.75, 116483.25, 116466.75, 116361.75, 116257.25, 116316.63, 116598.0]","[116651.5, 116583.25, 116535.5, 116494.5, 116508.5, 116413.13, 116421.5, 116429.0, 116417.25, 116344.0, 116278.0, 116408.0, 116401.13, 116486.5, 116397.5, 116500.0, 116540.25, 116525.75, 116551.75, 116520.75, 116327.25, 116246.0, 116278.5, 116302.5, 116283.5, 116253.75, 116309.75, 116259.25, 116274.5, 116281.5, 116344.75, 116260.25, 116432.75, 116467.25, 116371.75, 116419.0, 116396.0, 116529.25, 116177.5, 116023.38, 116122.25, 116260.0, 116288.38, 116683.5, 116651.5, 116610.75, 116631.25, 116588.5, 116535.5, 116494.5, 116553.25, 116508.5, 116482.25, 116413.13, 116463.0, 116445.0, 116429.5, 116344.0, 116329.5, 116278.0, 116296.0, 116401.13, 116523.0, 116566.0, 116370.0, 116246.0, 116316.5, 116259.25, 116382.5, 116177.5, 116189.75, 116117.5, 116553.25, 116614.25, 116406.0, 116296.0, 116443.25, 116445.25, 116465.0, 116488.75, 116564.5, 116501.0, 116508.5, 116513.0, 116566.0, 116620.25, 116536.75, 116625.25, 116304.5, 116326.0, 116365.0, 116367.5, 116372.5, 116362.0, 116379.75, 116372.75, 116275.75, 116294.0, 116301.75, 116361.5, 116398.0, 116381.88, 116404.75, 116335.75, 116352.25, 116446.25, 116498.75, 116467.5, 116481.0, 116505.0, 116525.75, 116558.25, 116120.0, 116124.75, 116155.0, 116179.5, 116242.0, 116299.5, 116349.75, 116423.75, 116023.38]",5.33 però qui: ai_prob = predict_live(strat.last_trade_features) Ottengo un errore come se le colonne che sto passando non sono uguali. Le colonne strat.last_trade_features e così composto: if not new_signal.empty: self.signals = pd.concat([self.signals, new_signal], ignore_index=True) self.signals = pd.concat([self.signals, new_signal], ignore_index=True) rr_effective = (take_profit - exec_price) / risk if signal == "BUY" else (exec_price - take_profit) / risk self.log_trade_to_csv(poi, signal, exec_price, stop_loss, take_profit, risk, rr_effective) new_trade_dict = { "exec_price": exec_price, "stop_loss": stop_loss, "take_profit": take_profit, "risk": risk, "rr_effective": ((take_profit - exec_price) / risk) if signal == "BUY" and risk > 0 else ((exec_price - take_profit) / risk) if signal == "SELL" and risk > 0 else 0, "poi_tipo": poi.tipo, "poi_direzione": poi.direzione, "poi_timeframe": poi.timeframe, "poi_bottom": poi.prezzo_di_attivazione_bottom, "poi_top": poi.prezzo_di_attivazione_top, "trend": self.trend, "range_high": self.range_mercato.strong_high.high if self.range_mercato else 0, "range_low": self.range_mercato.strong_low.low if self.range_mercato else 0, "buy_liquidity": max(self.liquidita_multi_timeframe.get(poi.timeframe, {}).get("buy_side", [0]), default=0), "sell_liquidity": min(self.liquidita_multi_timeframe.get(poi.timeframe, {}).get("sell_side", [0]), default=0) } self.last_trade_features = new_trade_dict Perchè ottengo questo errore?
